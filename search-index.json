[
  {
    "id": "overview",
    "title": "Overview",
    "body": "USQLite is a powerful Unreal Engine plugin designed to handle runtime data persistence with SQLite databases , without requiring the developer to write SQL queries or deal with Blueprint complexity. It uses reflection to automatically generate SQL commands from object properties and supports complex features like multithreaded operations, data versioning, object reference serialization, and custom load screens."
  },
  {
    "id": "key-features",
    "title": "Key Features",
    "body": "âœ… No SQL Required â€“ Auto-generate SQL from UObjects, Actors, or Components. ðŸš€ Multithreaded Execution â€“ Run save/load operations in background threads. ðŸ”„ Blueprint-Friendly â€“ Expose all functionality to Blueprints. ðŸ’¾ Data Versioning â€“ Store historical versions of objects for compatibility. ðŸ”— Reference Saving â€“ Supports saving and restoring UObject, Actor, and Component references. ðŸŽž Custom Load Screens â€“ Built-in splash screen, blur, or movie support during loading. ðŸ“ˆ Progress Feedback â€“ Real-time progress bar system and events. ðŸ”„ Runtime & Editor Integration â€“ Create/edit SQLite database assets directly in Unreal Editor. ðŸŽ® Game-Ready â€“ Ensures thread-safe operations while gameplay continues."
  },
  {
    "id": "class-overview",
    "title": "Class Overview",
    "body": "USQLite_Settings A configuration class to control default behavior of the SQLite system. UPROPERTY(EditDefaultsOnly, config)\nbool DeepLogs; Enables verbose logging of SQL operations. USQLite The core class managing database operations and schema generation. Properties DB_VERSION , DB_VERSIONS : Table versioning system. DB_MODE : Runtime threading mode (sync/threaded). DB_FILE : Absolute path to the SQLite database. DB_SelectCondition , DB_DeleteCondition : Optional WHERE clauses. DBS_QUEUE , DBL_QUEUE : SQL command queues for save/load. DB_REDIRECTORS : Maps old property names to new ones for backwards compatibility. LoadScreenMode : Enum for selecting the load screen type. Visual customization: SplashImage , ProgressBarTint , FeedbackFont , etc. Blueprint Events EVENT_OnBeginDataSAVE , EVENT_OnFinishDataSAVE EVENT_OnBeginDataLOAD , EVENT_OnFinishDataLOAD These events allow users to bind custom logic during save/load events. Blueprint Functions Command Queue API: void DB_EnqueueSAVE(FS"
  },
  {
    "id": "load-screen-system",
    "title": "Load Screen System",
    "body": "Customize user experience during save/load operations. Modes: BackgroundBlur SplashScreen MoviePlayer NoLoadScreen Configuration: BackBlurPower , SplashImage , SplashMovie ProgressBarOnMovie , PauseGameOnLoad FeedbackSAVE , FeedbackLOAD , FeedbackFont"
  },
  {
    "id": "threaded-operations",
    "title": "Threaded Operations",
    "body": "Async workers automatically manage background database operations using Unrealâ€™s FNonAbandonableTask : DBS_ExecuteQueue_Task\nDBL_ExecuteQueue_Task\nDBS_ImmediateSave_Task\nDBL_ImmediateLoad_OBJ_Task"
  },
  {
    "id": "example-use-cases",
    "title": "Example Use Cases",
    "body": "Save Player Progress : Store player stats, inventory, position, and level state. Versioned Game Saves : Maintain backward compatibility across game versions. Persistent Multiplayer World : Serialize and deserialize the game world without stalling the server. Custom Editor Tools : Create in-editor asset databases that persist metadata or gameplay tuning parameters."
  },
  {
    "id": "saving-and-loading-data",
    "title": "ðŸ”¹ Saving and Loading Data",
    "body": "âœ… Blueprint Example Save All Data [Event Begin Play]\n    â†“\n[Call Function: DB_Save]\n    - Context: Self\n    - Mode: SaveAll Load All Data [Event Begin Play]\n    â†“\n[Call Function: DB_Load]\n    - Context: Self âœ… C++ Example Save All Data USQLite* MyDatabase = ...; // Reference to the database asset\nMyDatabase->DB_Save(MyDatabase, ESQLSaveMode::SaveAll); Load All Data MyDatabase->DB_Load(MyDatabase);"
  },
  {
    "id": "saving-an-object-immediately",
    "title": "ðŸ”¹ Saving an Object Immediately",
    "body": "âœ… Blueprint [Call Function: DB_OBJ_ImmediateSAVE]\n    - Object: TargetObject âœ… C++ UObject* TargetObject = ...;\nMyDatabase->DB_OBJ_ImmediateSAVE(TargetObject);"
  },
  {
    "id": "saving-loading-actors-components",
    "title": "ðŸ”¹ Saving/Loading Actors & Components",
    "body": "âœ… Blueprint: Save Actor [Call Function: DB_ACT_ImmediateSAVE]\n    - Actor: TargetActor âœ… C++ AActor* Actor = ...;\nMyDatabase->DB_ACT_ImmediateSAVE(Actor);"
  },
  {
    "id": "custom-table-versioning",
    "title": "ðŸ”¹ Custom Table Versioning",
    "body": "âœ… Blueprint [Call Function: DB_SetVersion]\n    - Table: \"PlayerData_V2\" âœ… C++ bool success = MyDatabase->DB_SetVersion(\"PlayerData_V2\");"
  },
  {
    "id": "custom-sql-generation",
    "title": "ðŸ”¹ Custom SQL Generation",
    "body": "âœ… C++ FString SQL_Insert = MyDatabase->DB_GenerateSQL_Object_INSERT(MyObject);\nFString SQL_Update = MyDatabase->DB_GenerateSQL_Object_UPDATE(MyObject);\nFString SQL_Select = MyDatabase->DB_GenerateSQL_Object_SELECT(MyObject);"
  },
  {
    "id": "selecting-updating-columns",
    "title": "ðŸ”¹ Selecting & Updating Columns",
    "body": "âœ… Blueprint [Call Function: DB_SELECT_Integer]\n    - RowID: \"Player_001\"\n    - ColumnName: \"Health\" [Call Function: DB_UPDATE_Integer]\n    - RowID: \"Player_001\"\n    - ColumnName: \"Health\"\n    - Value: 75 âœ… C++ int32 CurrentHealth = MyDatabase->DB_SELECT_Integer(\"Player_001\", \"Health\");\n\nESQLResult Result = MyDatabase->DB_UPDATE_Integer(\"Player_001\", \"Health\", 75);"
  },
  {
    "id": "handling-save-load-events",
    "title": "ðŸ”¹ Handling Save/Load Events",
    "body": "âœ… Blueprint Events Bind to:\n- On Begin Data Save - On Finish Data Save - On Begin Data Load - On Finish Data Load âœ… C++ Overrides void AMyActor::DB_OnBeginSave_Implementation(USQLite* Database)\n{\n    UE_LOG(LogTemp, Log, TEXT(\"Saving started\"));\n}\n\nvoid AMyActor::DB_OnFinishLoad_Implementation(USQLite* Database, bool Success)\n{\n    if (Success)\n    {\n        UE_LOG(LogTemp, Log, TEXT(\"Loading completed successfully\"));\n    }\n}"
  },
  {
    "id": "using-load-screens",
    "title": "ðŸ”¹ Using Load Screens",
    "body": "âœ… Blueprint Settings Set LoadScreenMode to SplashScreen , MoviePlayer , or BackgroundBlur Configure SplashImage , BackBlurPower , FeedbackSAVE , etc. âœ… Runtime Behavior When loading data, the system automatically shows the configured UI and tracks progress via: [Call Function: DB_LaunchLoadScreen]"
  },
  {
    "id": "summary",
    "title": "Summary",
    "body": "USQLite is designed to be easy to integrate with both Blueprints and C++ , giving you powerful tools to persist data without dealing with SQL manually. Whether you're saving a simple player inventory or synchronizing thousands of object states across a streamed world, USQLite has you covered."
  }
]